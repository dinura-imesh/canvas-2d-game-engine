(()=>{var t={381:()=>{Array.prototype.remove=function(){let t,i,e=arguments,s=e.length;for(;s&&this.length;)for(t=e[--s];-1!==(i=this.indexOf(t));)this.splice(i,1);return this},Array.prototype.removeWhere=function(t){let i=this.length;for(;i--;)t(this[i],i)&&this.splice(i,1)},Number.prototype.toDisplayString=function(){return this.toLocaleString("en-US",{maximumFractionDigits:2})}}},i={};function e(s){var n=i[s];if(void 0!==n)return n.exports;var a=i[s]={exports:{}};return t[s](a,a.exports,e),a.exports}(()=>{"use strict";e(381);class t{loops=[];scenes=[];time={deltaTime:0,time:0,lastLoopTime:0};constructor(){if(t.instance instanceof t)return t.instance;console.log("Engine initialized"),this.initializeEngine(),t.instance=this}initializeEngine(){this.canvas=document.createElement("canvas"),this.updateCanvasSize(),this.context=this.canvas.getContext("2d"),document.body.insertBefore(this.canvas,document.body.childNodes[0]),this.time.lastLoopTime=Date.now(),this.handleClick(),this.gameLoop()}setBackgroundColor=t=>{this.canvas.style.backgroundColor=t};updateCanvasSize=()=>{this.canvas.height=window.innerHeight,window.innerWidth>window.innerHeight?this.canvas.width=window.innerHeight/16*9:this.canvas.width=window.innerWidth,this.canvasWidth=this.canvas.width,this.canvasHeight=this.canvas.height,this.ratioX=this.canvasWidth/100,this.ratioY=this.canvasHeight/100};handleClick=()=>{this.canvas.addEventListener("mousedown",(t=>{let i=t.offsetX,e=t.clientY;this.scenes.forEach((t=>t.handleClick(i,e)))}))};addScene=t=>{this.scenes.push(t)};removeScene=t=>{this.scenes.removeWhere((i=>i.tag===t))};gameLoop=()=>{this.clear(),this.handleTime(),this.scenes.forEach((t=>{t.draw(this.context)})),this.loops.forEach((t=>{t()})),requestAnimationFrame(this.gameLoop)};handleTime=()=>{let t=Date.now();this.time.deltaTime=(t-this.time.lastLoopTime)/1e3,this.time.time+=this.time.deltaTime,this.time.lastLoopTime=t};clear=()=>{this.context.clearRect(0,0,this.canvas.width,this.canvas.height)};registerLoop=t=>{this.loops.push(t)};unregisterLoop=t=>{this.loops.remove(t)}}const i=t,s=class{static guid(){let t="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890",i="";for(let e=0;e<16;e++)i+=t[Math.floor(Math.random()*t.length)];return i}};class n{constructor(t,i,e,s){this.x=t,this.y=i,this.sizeX=e,this.sizeY=s,this.initialX=this.x,this.initialY=this.y,this.initialSizeX=this.sizeX,this.initialSizeY=this.sizeY}static fromPosition=(t,e)=>new n(t*i.instance.ratioX,e*i.instance.ratioY,1,1);static one=()=>new n(1,1,1,1);static squareSize=(t,e,s)=>new n(t*i.instance.ratioX,e*i.instance.ratioY,s*i.instance.ratioX,s*i.instance.ratioX);static fromAll=t=>new n(t*i.instance.ratioX,t*i.instance.ratioX,t*i.instance.ratioX,t*i.instance.ratioX);static centered=(t,e,s,a)=>new n(t*i.instance.ratioX-s*i.instance.ratioX/2,e*i.instance.ratioY-a*i.instance.ratioY/2,s*i.instance.ratioX,a*i.instance.ratioY);moveX=t=>this.x+=t*i.instance.ratioX;moveY=t=>this.y+=t*i.instance.ratioY;move=(t,e)=>{this.x+=t*i.instance.ratioX,this.y+=e*i.instance.ratioY};setScale(t){this.sizeX=this.initialSizeX*t,this.sizeY=this.initialSizeY*t,this.x=this.initialX+(this.initialSizeX-this.initialSizeX*t)/2,this.y=this.initialY+(this.initialSizeY-this.initialSizeY*t)/2}}const a=n,o=class{constructor(t,i=a.one(),e,n=!0){this.guid=s.guid(),this.visible=n,0===t.length?this.tag=this.guid:this.tag=t,this.transform=i,this.onClick=e}setTag=t=>this.tag=t;initialize(){}setOnClick=t=>{this.onClick=t};draw(t){}loop(){}setVisibility=t=>this.visible=t},h=class{fontType="normal";font="Poppins";fontSize=50*i.instance.ratioX;fillStyle="black";textAlign="left";lineHeight=2*i.instance.ratioY;maxWidth=1e3;getFont=()=>`${this.fontType} ${this.fontSize}px ${this.font}`;setFont=t=>(this.font=t,this);setFillStyle=t=>(this.fillStyle=t,this);setTextAlign=t=>(this.textAlign=t,this);setFontSize=t=>(this.fontSize=t*i.instance.ratioX,this);setFontType=t=>(this.fontType=t,this);setLineHeight=t=>(this.lineHeight=t*i.instance.ratioY,this);setMaxWidth=t=>(this.maxWidth=t*i.instance.ratioX,this)},r=class extends o{constructor(t,{style:i=new h,transform:e=a.one(),tag:s="",onClick:n}){super(s,e,n),this.text=t,this.style=i}draw(t){t.font=this.style.getFont(),t.fillStyle=this.style.fillStyle,t.textAlign=this.style.textAlign;let e=this.text.split(" "),s="",n=this.transform.y;for(let a=0;a<e.length;a++){let o=s+e[a]+" ";t.measureText(o).width>this.style.maxWidth&&a>0?(t.fillText(s,this.transform.x,n-1.4*i.instance.ratioY),s=e[a]+" ",n+=this.style.lineHeight):s=o}t.fillText(s,this.transform.x,n)}setText(t){this.text=t}},l=class{static getImage(t){let i=new Image;return i.src=t,i}},c=new i;let g=0;const m=new class{components=[];constructor(t,{backgroundColor:e="#fff",tag:n="",visible:a=!0}){this.guid=s.guid(),this.components=t,0===n.length?this.tag=this.guid:this.tag=n,i.instance.setBackgroundColor(e),this.isVisible=a}draw=t=>{this.isVisible&&this.components.forEach((i=>{i.visible&&i.draw(t),i.loop()}))};handleClick=(t,i)=>{this.isVisible&&this.components.forEach((e=>{null!=e.onClick&&t>=e.transform.x&&t<=e.transform.x+e.transform.sizeX&&i>=e.transform.y&&i<=e.transform.y+e.transform.sizeY&&e.onClick()}))};setVisibility=t=>this.isVisible=t;removeScene=()=>(new i).removeScene(this.tag);findComponentByTag=t=>this.components.find((i=>i.tag===t))}([new r("Hello",{style:(new h).setFontSize(8).setFillStyle("#098aa0").setTextAlign("center"),transform:a.fromPosition(50,10)}),new r(`Count ${g}`,{style:(new h).setFontSize(8).setFillStyle("#098aa0").setTextAlign("center"),transform:a.fromPosition(50,50),tag:"counter"}),new class extends o{constructor(t,{transform:i=a.one(),tag:e="",onClick:s}){super(e,i,s),this.image=l.getImage(t)}draw=t=>{t.drawImage(this.image,this.transform.x,this.transform.y,this.transform.sizeX,this.transform.sizeY)};setImage=t=>{this.image=l.getImage(t)}}("./images/btn.png",{transform:a.centered(50,85,50,10),tag:"button"})],{backgroundColor:"#fff",tag:"sample_scene"});new class{elapsed=0;value=0;constructor(t,i,e,s,n,{loop:a=!1}){this.tweeningTransform=t,this.type=i,this.duration=e,this.loop=a,this.initialValue=s,this.targetValue=n,"scale"===this.type&&(this.tweeningFunction=this.scale)}start=()=>(i.instance.registerLoop(this.tween),this);stop=()=>(i.instance.unregisterLoop(this.tween),this);tween=()=>{if(this.elapsed<this.duration)this.tweeningFunction(),this.elapsed+=i.instance.time.deltaTime;else if(this.loop){this.elapsed=0;let t=this.initialValue;this.initialValue=this.targetValue,this.targetValue=t}else this.stop()};scale=()=>{let t=this.elapsed/this.duration,i=(this.targetValue-this.initialValue)*t+this.initialValue;this.tweeningTransform.setScale(i)}}(m.findComponentByTag("button").transform,"scale",.5,1,1.05,{loop:!0}).start(),m.findComponentByTag("button").setOnClick((()=>{g+=1,m.findComponentByTag("counter").setText(`Count ${g}`)})),c.addScene(m)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,